package com.socialization.resourceutil;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Map.Entry;
import java.util.TreeMap;
import com.socialization.domain.Resource;

public class TimeCount {
	public Date timeCount(String string) {  //取搜索时间
		Date date=new Date();		
	    Calendar calendar=new GregorianCalendar(); 
	    calendar.setTime(date); 	
		switch (string) {
		case "请选择日期":
	           calendar.add(Calendar.DATE, -3650); 
				break;
		case "一周以内":
           calendar.add(Calendar.DATE, -7); 
			break;
		case "一月以内":
			calendar.add(Calendar.DATE, -30); 
			break;
		case "一年以内":
			calendar.add(Calendar.DATE, -365); 
			break;
		default:
			break;
		}
		return calendar.getTime();
	}
	@SuppressWarnings("unchecked")
	public static Map sortMap(Map oldMap) {   //对MAP中的键值对按VAlue值进行排序 
        ArrayList<Map.Entry<String, Integer>> list = new ArrayList<Map.Entry<String, Integer>>(oldMap.entrySet());  
        Collections.sort(list, new Comparator<Map.Entry<String, Integer>>() {  
  
            @Override  
            public int compare(Entry<java.lang.String, Integer> arg0,  
                    Entry<java.lang.String, Integer> arg1) {  
                return arg0.getValue() - arg1.getValue();  
            }  
        });  
        Map newMap = new LinkedHashMap();  
        for (int i = list.size()-1; i >=0 ; i--) {  
            newMap.put(list.get(i).getKey(), list.get(i).getValue());  
        }  
        return newMap;  
    }
	public Map<String, Integer> resToMap(List<Resource> list) {  //取得排行最多的五个标签
		String resTagList="";
		for (int i = 0; i < list.size(); i++) {  //获取每个资源的标签，并用空格隔开
          resTagList=resTagList+list.get(i).getResTags()+" ";
		}
		String[] resT=resTagList.split(" "); //按空格隔开，变成数组
		Map<String, Integer> map = new TreeMap<String, Integer>(); //统计每个标签出现的次数 
        for (int i = 0; i < resT.length; i++) {  
            if (map.containsKey(resT[i])) {  
                int tempCount = map.get(resT[i]);  
                map.put(resT[i], ++tempCount);  
            } else {  
                map.put(resT[i], 1);  
            }  
        }
        map=new TimeCount().sortMap(map);  //调用排序算法
        Map<String, Integer> mapresult=new TreeMap<String,Integer>();
        Set<String> set=map.keySet();
        Iterator<String> iterator=set.iterator(); 
        int i=5;
        while (iterator.hasNext()&&i>0) {
        String ss=iterator.next();
        int ii=map.get(ss);
        mapresult.put(ss, ii);
        i--;
		}
        return mapresult;
	}
}
