package com.socialization.action;

import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import org.apache.struts2.ServletActionContext;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.opensymphony.xwork2.ActionContext;
import com.socialization.base.BaseAction;
import com.socialization.domain.Role;
import com.socialization.domain.User;
import com.socialization.util.MD5Util;
import com.socialization.util.QueryHelper;

import net.sf.json.JSONObject;



@SuppressWarnings("serial")
@Controller
@Scope("prototype")		//坑死爹了
public class UserAction extends BaseAction<User> {

	private Long friendId;
	private long roleId;	//用户id
	private int page;		//页号，从0开始
	private String ids;		//要批量删除的id
	
	private static UserAction ua;  //单例模式的唯一实例
	
	//向浏览器输出 
	private HttpServletResponse response = ServletActionContext.getResponse();
    
	/**
	 * @desc 构造函数
	 * @author yanbaobin@yeah.net
	 * Aug 5, 2015 7:59:06 PM
	 */
	private UserAction() {
		response.setContentType("text/html;charset=utf-8");
		
		System.out.println("被创建");
	}
	
	/**
	 * @desc 获取单例模式的实例
	 * @return UserAction实例
	 * @author yanbaobin@yeah.net
	 * @date Aug 5, 2015 9:14:27 PM
	 */
	public static UserAction getInstance(){
		if(ua == null)
			ua = new UserAction();
		
		return ua;
	}
	
	/** 列表 */
	public String list() throws Exception {
		/*List<User> userList = userService.findAll();
		
		//初始化都不会
		List<User> currentUserList = new ArrayList<User>();
		
		int page = (int) getPage();
		int start = page * 5;
		
		for (int i = start; i < start + 5; i++) {
			currentUserList.add(userList.get(i));
		}
		
		ActionContext.getContext().put("currentUserList", currentUserList);*/
		new QueryHelper(User.class, "u")
		.addOrderProperty("u.registTime", false)
		.perparePageBean(userService, currentPage, 10);//${(currentPage - 1) * pageSize + status.count}
		
		return "list";
	}

	/** 删除 */
	public String delete() throws Exception {
		userService.delete(model.getId());
		return "toList";
	}

	/** 添加页面 */
	public String addUI() throws Exception {
		User user = userService.getById(model.getId());
		ActionContext.getContext().getValueStack().push(user);
		return "saveUI";
	}

	/**
	 * @desc 管理员添加新用户
	 * @return 用户列表页面
	 * @throws Exception
	 * @author yanbaobin@yeah.net
	 * @date Aug 5, 2015 5:03:25 PM
	 */
	public void add() throws Exception {
		/*保存用户*/
		Role role = new Role();
		role.setId(getRoleId());
		
		model.setPassword(MD5Util.MD5("111111"));
		model.setRole(role);
		model.setRegistTime(new Date());
		
		userService.save(model);
		
		/*保存之后，为回显准备数据*/
		User user = userService.findByLoginName(model.getLoginName());
		
		String userID = user.getId().toString();	//id
		String loginName = user.getLoginName();     //登录名
		
		long roleID = user.getRole().getId();
		String roleName = "";						//角色
		
		switch((int)roleID){
			case 1: roleName = "系统管理员";
				break;
			case 2: roleName = "普通管理员";
				break;
			default: roleName = "用户";
		}
		
		String registTime = user.getRegistTime().toString();	//注册时间
		
		/*准备json数据*/
		HashMap<String, String> userData = new HashMap<String, String>(); 
		userData.put("user_id", userID);
		userData.put("login_name", loginName);
		userData.put("role", roleName);
		userData.put("regist_time", registTime);
		
		//json的jar包和其所依赖的jar包够蛋疼的
		JSONObject jo = JSONObject.fromObject(userData);
		
		try {
			response.getWriter().write(jo.toString());
		} catch (Exception e) {
			// TODO: handle exception
		}
	}

	/**
	 * @desc 对用户名进行模糊查询
	 * @author yanbaobin@yeah.net
	 * @date Aug 7, 2015 2:36:55 PM
	 */
	public void search(){
		List<User> user = userService.fuzzySearch(model.getLoginName());
		
		StringBuilder tableContent = new StringBuilder();
		StringBuilder roleName = new StringBuilder("系统管理员");
		
		int order = 0;		//表格里当前行的序号
		
		for (User u : user) {
			if(u.getRole().getId() == 2)
				roleName.replace(0, roleName.length(), "普通管理员");
			else if(u.getRole().getId() == 3)
				roleName.replace(0, roleName.length(), "用户");
			
			order++;
			
			/*拼接表格一行的内容：复选框、id、登录名、角色、注册时间、操作按钮*/
			tableContent
				.append("<tr class='data'>")
				
					/*复选框*/
					.append("<td>")
						.append("<label class='checkbox'>")
							.append("<input name='check' value='").append(u.getId()).append("' type='checkbox'>").append(order)
						.append("</label>")
					.append("</td>")
					
					.append("<td>").append(u.getId()).append("</td>")			//id
					.append("<td>").append(u.getLoginName()).append("</td>")  	//登录名
					.append("<td>").append(roleName).append("</td>")			//角色
					.append("<td>").append(u.getRegistTime()).append("</td>")	//注册时间
					
					/*修改和删除按钮*/
					.append("<td style='width:123px;'>")
							.append("<button class='btn btn-info btn-xs' data-backdrop='static' data-toggle='modal'")
									.append("data-target='#myModal' onClick='modify(this)'>")
									.append("<span class='glyphicon glyphicon-pencil'></span> 修改")
							.append("</button>")
							.append("<a class='btn btn-danger btn-xs' style='margin-left:4px;' href='user_delete.action?id=").append(u.getId()).append("'>") 
									.append("<span class='glyphicon glyphicon-remove'></span> 删除")
							.append("</a>")
					.append("</td>")
					
				.append("</tr>");
		}
		
		System.out.println(tableContent.toString());
		
		try {
			response.getWriter().write(tableContent.toString());
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
	
	/** 修改页面 */
	public String editUI() throws Exception {
		return "saveUI";
	}

	/**
	 * @desc 更新用户角色
	 * @return 
	 * @throws Exception
	 * @author yanbaobin@yeah.net
	 * @date Aug 5, 2015 1:43:55 PM
	 */
	public void edit() throws Exception {
		
		/*设置用户的角色，需要通过设置其role属性，
		 * 而role属性需要通过前台传递过来的id实例化*/
		Role role = new Role();
		role.setId(getRoleId());
		
		User user = userService.getById(model.getId());
		user.setRole(role);
		
		userService.update(user);
		
	}
	
	/** 增加关注 */
	public String addAttention()  throws Exception {
		//需要加的好友
		User friend = userService.getById(friendId);
		
		//当前登陆用户
		User user = userService.getById(getCurrentUser().getId());
		
		user.getFriends().add(friend);
		
		friend.setFansCount(friend.getFansCount()+1);
		user.setAttentionCount(user.getAttentionCount()+1);
		
		userService.update(user);
		
		return "toShowTip";
	}
	/** 取消关注*/
	public String removeAttention()  throws Exception {
		//需要加的好友
		User friend = userService.getById(friendId);
		
		//当前登陆用户
		User user = userService.getById(getCurrentUser().getId());
		
		user.getFriends().remove(friend);
		
		friend.setFansCount(friend.getFansCount()-1);
		user.setAttentionCount(user.getAttentionCount()-1);
		
		userService.update(user);
		
		return "toIndex";
	}
	
	/** 登陆 */
	public String login() throws Exception {
		User u = userService.findByLoginNameAngPassword(model.getLoginName(),model.getPassword());
		 //获取跳转到登陆界面之前的页面地址，由拦截器提供
        String prePage = (String) ActionContext.getContext().getSession().get("prePage");
        
		if(u==null){
			addFieldError("fail", "用户名或密码错误！");
			return "loginUI";
		}else{
			ActionContext.getContext().getSession().put("user", u);
			System.out.println("======prePage========" + prePage);
			if(prePage==null){
				return "toLogin";
			}else {
				return "myOrder";
			}
		}
	}
	
	/**
	 * @desc 用ajax发送登录请求，由此方法处理
	 * @throws IOException
	 * @author yanbaobin@yeah.net
	 * @date Aug 3, 2015 1:55:26 PM
	 */
	public void signIn() throws IOException{
		
		String loginName = model.getLoginName();
		String password = model.getPassword();
		
		if(!userService.isExist(loginName))
			response.getWriter().write("用户名不存在");
		else{
			if(userService.findByLoginNameAngPassword(loginName, MD5Util.MD5(password)) == null)
				response.getWriter().write("密码错误");
			else{
				response.getWriter().write("登录成功");
				
				ActionContext.getContext().getSession()
				.put("user", userService.findByLoginNameAngPassword(loginName, MD5Util.MD5(password)));
			}
		}
	}
	
	/**
	 * @desc 从session中获取当前登录用户,返回结果给ajax请求
	 * @author yanbaobin@yeah.net
	 * @throws IOException 
	 * @date Aug 3, 2015 3:52:11 PM
	 */
	public void getUser() throws IOException{
		User user = (User) ActionContext.getContext().getSession().get("user");
		
		if(user != null)
			response.getWriter().write(user.getLoginName());
	}
	
	/**
	 * @desc 获取登录之前的页面，即别拦截的页面
	 * @author yanbaobin@yeah.net
	 * @date Aug 4, 2015 8:23:33 PM
	 */
	public void getPrePage(){
		String prePage = (String) ActionContext.getContext().getSession().get("prePage");
		
		if(prePage != null)
			try {
				response.getWriter().write(prePage);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	}
	
	/**
	 * @desc 判断用户名是否已被注册
	 * @author yanbaobin@yeah.net
	 * @date Aug 3, 2015 8:03:21 PM
	 */
	public void isExist(){
		if(userService.isExist(model.getLoginName()))
			try {
				response.getWriter().write("用户名已被注册");
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	}
	
	/**
	 * @desc 用户注册或者管理员添加用户
	 * @author yanbaobin@yeah.net
	 * @date Aug 4, 2015 11:19:15 AM
	 */
	public void regist() {
		try {
			//抛出异常，插入数据库的语句不被执行
			if(model.getPassword() == null)
				throw new NullPointerException("密码未传递成功！");
			
			model.setPassword(MD5Util.MD5(model.getPassword()));	//对密码加密
			
			Role role = new Role();		//默认用户角色为用户
			role.setId(getRoleId());
			
			model.setRole(role);
			model.setRegistTime(new Date());
			userService.save(model);
			
			//添加默认图片
			
			try {
				response.getWriter().write("注册成功");
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} catch (NullPointerException e) {
			
		}
	}
	
	/**
	 * @desc 批量删除用户(服务器貌似闹情绪啊，试了几次都没成功)
	 * @author yanbaobin@yeah.net
	 * @date Aug 6, 2015 9:06:24 PM
	 */
	public void bacthDelete(){
		String[] userId = getIds().split(",");
		int count = userId.length;
		
		try {
			for (int i = 0; i < count; i++) {
				if(userId[i].equals(""))
					throw new NullPointerException();
				
				userService.delete((long)Integer.parseInt(userId[i]));
			} 
		} catch (NullPointerException e) {
			// TODO: handle exception
		}
		
		try {
			response.getWriter().write("删除成功");
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
	
	/** 登录界面 */
	public String loginUI() throws Exception {
		return "loginUI";
	}
	
	/** 注销 */
	public String logout() throws Exception {
		
		ActionContext.getContext().getSession().remove("user");
		
		/*
		 * 考虑这种情况
		 * 用户注销后，返回到首页，主动登录，登录之后正确的页面应该是首页
		 * 但由于之前的prePage Session没有清除，就会跳转到之前的页面
		 * 发现的bug，直接指向首页，登录后，刷新，又退出了，因为是logout请求
		 */
		ActionContext.getContext().getSession().remove("prePage");
		
		return "logout";
	}

	/*=================getter和setter=================*/
	public Long getFriendId() {
		return friendId;
	}
	
	public void setFriendId(Long friendId) {
		this.friendId = friendId;
	}

	public long getRoleId() {
		return roleId;
	}

	public void setRoleId(int roleId) {
		this.roleId = roleId;
	}

	public int getPage() {
		return page;
	}
	
	public void setPage(int page) {
		this.page = page;
	}

	
	public String getIds() {
		return ids;
	}

	
	public void setIds(String ids) {
		this.ids = ids;
	}
	
}
