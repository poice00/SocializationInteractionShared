package com.socialization.action;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import org.apache.struts2.ServletActionContext;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.opensymphony.xwork2.ActionContext;
import com.socialization.base.BaseAction;
import com.socialization.domain.Role;
import com.socialization.domain.User;
import com.socialization.util.MD5Util;


@SuppressWarnings("serial")
@Controller
@Scope("prototype")		//坑死爹了
public class UserAction extends BaseAction<User> {

	private Long friendId;
	private long roleId;	//用户id
	private int page;		//页号，从0开始
	
	private static UserAction ua;  //单例模式的唯一实例
	
	//向浏览器输出 
	private HttpServletResponse response = ServletActionContext.getResponse();
    
	/**
	 * @desc 构造函数
	 * @author yanbaobin@yeah.net
	 * Aug 5, 2015 7:59:06 PM
	 */
	private UserAction() {
		response.setContentType("text/html;charset=utf-8");
		
		System.out.println("被创建被创建被创建被创建被创建");
	}
	
	/**
	 * @desc 获取单例模式的实例
	 * @return UserAction实例
	 * @author yanbaobin@yeah.net
	 * @date Aug 5, 2015 9:14:27 PM
	 */
	public static UserAction getInstance(){
		if(ua == null)
			ua = new UserAction();
		
		return ua;
	}
	
	/** 列表 */
	public String list() throws Exception {
		List<User> userList = userService.findAll();
		
		//初始化都不会
		List<User> currentUserList = new ArrayList<User>();
		
		int page = (int) getPage();
		int start = page * 5;
		
		for (int i = start; i < start + 5; i++) {
			currentUserList.add(userList.get(i));
		}
		
		ActionContext.getContext().put("currentUserList", currentUserList);
		
		return "list";
	}

	/** 删除 */
	public String delete() throws Exception {
		userService.delete(model.getId());
		return "toList";
	}

	/** 添加页面 */
	public String addUI() throws Exception {
		return "saveUI";
	}

	/**
	 * @desc 管理员添加新用户
	 * @return 用户列表页面
	 * @throws Exception
	 * @author yanbaobin@yeah.net
	 * @date Aug 5, 2015 5:03:25 PM
	 */
	public String add() throws Exception {
		Role role = new Role();
		role.setId(getRoleId());
		
		model.setPassword(MD5Util.MD5("111111"));
		model.setRole(role);
		model.setRegistTime(new Date());
		
		userService.save(model);
		
		return "toList";
	}

	/** 修改页面 */
	public String editUI() throws Exception {
		return "saveUI";
	}

	/**
	 * @desc 更新用户角色
	 * @return 
	 * @throws Exception
	 * @author yanbaobin@yeah.net
	 * @date Aug 5, 2015 1:43:55 PM
	 */
	public String edit() throws Exception {
		
		/*设置用户的角色，需要通过设置其role属性，
		 * 而role属性需要通过前台传递过来的id实例化*/
		Role role = new Role();
		role.setId(getRoleId());
		
		User user = userService.getById(model.getId());
		user.setRole(role);
		
		userService.update(user);
		
		return "toList";
	}
	
	/** 增加关注 */
	public String addAttention()  throws Exception {
		//需要加的好友
		User friend = userService.getById(friendId);
		
		//当前登陆用户
		User user = userService.getById(getCurrentUser().getId());
		
		user.getFriends().add(friend);
		
		friend.setFansCount(friend.getFansCount()+1);
		user.setAttentionCount(user.getAttentionCount()+1);
		
		userService.update(user);
		
		return "toShowTip";
	}
	/** 取消关注*/
	public String removeAttention()  throws Exception {
		//需要加的好友
		User friend = userService.getById(friendId);
		
		//当前登陆用户
		User user = userService.getById(getCurrentUser().getId());
		
		user.getFriends().remove(friend);
		
		friend.setFansCount(friend.getFansCount()-1);
		user.setAttentionCount(user.getAttentionCount()-1);
		
		userService.update(user);
		
		return "toShowTip";
	}
	
	/** 登陆 */
	public String login() throws Exception {
		User u = userService.findByLoginNameAngPassword(model.getLoginName(),model.getPassword());
		 //获取跳转到登陆界面之前的页面地址，由拦截器提供
        String prePage = (String) ActionContext.getContext().getSession().get("prePage");
        
		if(u==null){
			addFieldError("fail", "用户名或密码错误！");
			return "loginUI";
		}else{
			ActionContext.getContext().getSession().put("user", u);
			System.out.println("======prePage========" + prePage);
			if(prePage==null){
				return "toLogin";
			}else {
				return "myOrder";
			}
		}
	}
	
	/**
	 * @desc 用ajax发送登录请求，由此方法处理
	 * @throws IOException
	 * @author yanbaobin@yeah.net
	 * @date Aug 3, 2015 1:55:26 PM
	 */
	public void signIn() throws IOException{
		
		String loginName = model.getLoginName();
		String password = model.getPassword();
		
		if(!userService.isExist(loginName))
			response.getWriter().write("用户名不存在");
		else{
			if(userService.findByLoginNameAngPassword(loginName, MD5Util.MD5(password)) == null)
				response.getWriter().write("密码错误");
			else{
				response.getWriter().write("登录成功");
				
				ActionContext.getContext().getSession()
				.put("user", userService.findByLoginNameAngPassword(loginName, MD5Util.MD5(password)));
			}
		}
	}
	
	/**
	 * @desc 从session中获取当前登录用户,返回结果给ajax请求
	 * @author yanbaobin@yeah.net
	 * @throws IOException 
	 * @date Aug 3, 2015 3:52:11 PM
	 */
	public void getUser() throws IOException{
		User user = (User) ActionContext.getContext().getSession().get("user");
		
		if(user != null)
			response.getWriter().write(user.getLoginName());
	}
	
	/**
	 * @desc 获取登录之前的页面，即别拦截的页面
	 * @author yanbaobin@yeah.net
	 * @date Aug 4, 2015 8:23:33 PM
	 */
	public void getPrePage(){
		String prePage = (String) ActionContext.getContext().getSession().get("prePage");
		
		if(prePage != null)
			try {
				response.getWriter().write(prePage);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	}
	
	/**
	 * @desc 判断用户名是否已被注册
	 * @author yanbaobin@yeah.net
	 * @date Aug 3, 2015 8:03:21 PM
	 */
	public void isExist(){
		if(userService.isExist(model.getLoginName()))
			try {
				response.getWriter().write("用户名已被注册");
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	}
	
	/**
	 * @desc 用户注册或者管理员添加用户
	 * @author yanbaobin@yeah.net
	 * @date Aug 4, 2015 11:19:15 AM
	 */
	public void regist() {
		try {
			//抛出异常，插入数据库的语句不被执行
			if(model.getPassword() == null)
				throw new NullPointerException("密码未传递成功！");
			
			model.setPassword(MD5Util.MD5(model.getPassword()));	//对密码加密
			
			Role role = new Role();		//默认用户角色为用户
			role.setId(getRoleId());
			
			model.setRole(role);
			model.setRegistTime(new Date());
			userService.save(model);
			
			try {
				response.getWriter().write("注册成功");
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} catch (NullPointerException e) {
			
		}
	}
	
	/** 登录界面 */
	public String loginUI() throws Exception {
		return "loginUI";
	}
	
	/** 注销 */
	public String logout() throws Exception {
		
		ActionContext.getContext().getSession().remove("user");
		
		/*
		 * 考虑这种情况
		 * 用户注销后，返回到首页，主动登录，登录之后正确的页面应该是首页
		 * 但由于之前的prePage Session没有清除，就会跳转到之前的页面
		 */
		ActionContext.getContext().getSession().remove("prePage");
		
		return "logout";
	}


	
	/*=================getter和sette=================*/
	public Long getFriendId() {
		return friendId;
	}
	
	public void setFriendId(Long friendId) {
		this.friendId = friendId;
	}

	public long getRoleId() {
		return roleId;
	}

	public void setRoleId(int roleId) {
		this.roleId = roleId;
	}

	
	public int getPage() {
		return page;
	}
	

	public void setPage(int page) {
		this.page = page;
	}
	
}
