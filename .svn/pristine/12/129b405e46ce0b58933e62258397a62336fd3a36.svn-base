package com.socialization.resourceutil;

import java.util.ArrayList;
import java.util.List;

import org.springframework.dao.support.DaoSupport;

import com.opensymphony.xwork2.ActionContext;


public class QueryHelper {

	private String fromClause; // from子句
	private String whereClause = ""; // where子句
	private String orderByClause = ""; // orderBy子句

	private List<Object> parameters = new ArrayList<Object>();

	/**
	 * 生成From子句
	 * 
	 * @param clazz
	 * @param alias
	 *            别名
	 */
	public QueryHelper(Class clazz, String alias) {
		fromClause = "FROM " + clazz.getSimpleName() + " " + alias;
	}

	/**
	 * 生成where子句
	 * 
	 * @param condition
	 * @param params
	 */
	public QueryHelper addCondition(String condition, Object... params) {
		// 拼接子句
		if (whereClause.length() == 0) {
			whereClause = " WHERE " + condition;
		} else {
			whereClause += " AND " + condition;
		}
		// 处理参数
		if (params != null) {
			for (Object o : params) {
				getParameters().add(o);
			}
		}
		return this;

	}

	public QueryHelper addCondition(boolean append, String condition, Object... params) {
		if (append) {
			addCondition(condition, params);
		}
		return this;
	}

	/**
	 * 生成orderBy子句
	 * 
	 * @param propertyName
	 * @param asc
	 */

	public QueryHelper addOrderProperty(String propertyName, boolean asc) {
		// 拼接子句
		if (orderByClause.length() == 0) {
			orderByClause = " ORDER BY " + propertyName + (asc ? " ASC" : " DESC");
		} else {
			orderByClause += "," + propertyName + (asc ? " ASC" : " DESC");
		}
		return this;
	}

	public QueryHelper addOrderProperty(boolean append, String propertyName, boolean asc) {
		// 拼接子句
		if (append) {
			addOrderProperty(propertyName, asc);
		}
		return this;
	}

	/*
	 * public void perparedPageBean(Service service ,int currentPage,int
	 * pageSize){
	 * 
	 * PageBean pageBean = service.getPageBean(currentPage, pageSize, this);
	 * ActionContext.getContext().getValueStack().push(pageBean); }
	 */

	/**
	 * 获取生成的用于查询数据列表的HQL
	 * 
	 * @return
	 */
	public String getListQueryHql() {
		return fromClause + whereClause + orderByClause;
	}

	/**
	 * 获取生成的用于查询总记录数 的HQL
	 * 
	 * @return
	 */
	public String getCountQueryHql() {
		return "SELECT COUNT(*) " + fromClause + whereClause;
	}

	/**
	 * 获取Hql的参数列表
	 * 
	 * @return
	 */
	public List<Object> getParameters() {
		return parameters;
	}

	public void setParameters(List<Object> parameters) {
		this.parameters = parameters;
	}
	/**
	 * 查询分页信息，并放到值栈栈顶
	 * 
	 * @param service
	 * @param currentPage
	 * @param pageSize
	 */
	/*public void perparePageBean(DaoSupport<?> service, int currentPage, int pageSize) {
		PageBean pageBean = service.getPageBean(currentPage, pageSize, this);
		ActionContext.getContext().getValueStack().push(pageBean);
	}*/
}